= field_set_tag nil, id: 'distance-filter', class: 'input-search-filter input-search-filter-option' do
  = label_tag 'distance', t('labels.distance_filter')
  = select_tag :distance, options_for_select([1, 2, 10, 25], @selected_distance_filter), include_blank: 'All', class: "distance-search-select-left-menu"

#geolocate-box
  = hidden_field_tag :lat, @lat
  = hidden_field_tag :long, @long
  - if @lat.present? && @long.present?
    %i.fa.fa-compass.fa-2x.geolocated#button-geolocate{ "aria-label" => t('buttons.services_near_me'), "title" => t('buttons.services_near_me') }
    %span= t('buttons.services_near_me')
  - else 
    %i.fa.fa-compass.fa-2x#button-geolocate{ "aria-label" => t('buttons.services_near_me'), "title" => t('buttons.services_near_me') }
    %span= t('buttons.services_near_me')

= button_tag "Apply Filters"

:javascript
  var options = {
    enableHighAccuracy: false,
    timeout: 20000,
    maximumAge: 9999999
  };

  function success(pos) {
    let crd = pos.coords;
    let params = new URLSearchParams(window.location.search);
    params.set('lat', crd.latitude)
    params.set('long', crd.longitude)
    window.location.href = `${location.pathname}?${params}`
  };

  function error(err) {
    console.warn(`ERROR(${err.code}): ${err.message}`);
  }

  $('#button-geolocate').on('click', function(e){
    e.preventDefault();
    navigator.geolocation.getCurrentPosition(success, error, options);
  })
